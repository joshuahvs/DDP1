# x = 20 
# y = 10 
# try:
#     x += int("7")
# except (ValueError ,NameError): 
#     y+=10
#     x=x+y 
# else:
#     x += 30 
# finally: 
#     y += x
#     print(x) 
# print(y)

with open("fasilkom.txt", "r") as x: 
    x.seek(5)
    # print(x.read(2))
    # x.read(25)
    # print(x.tell())
    x.seek(15)
    # print(x.read(2))
    print(x.tell())
    print(x.read(2))

# print({x:len(x) for x in "uas ddp kesatu dan ddp kedua".split() if len(x)<4})

# def fun(x,y): 
#     x=y
#     y = {5,2,3}
#     return x.symmetric_difference(y)

# a, b = {1,3,2,3}, {4,2,3,4} 
# z = fun(a,b)
# print(a) 
# print(b) 
# print(z)


# class Gadget(object):
#     def __init__(self, merek, tipe):
#         self.merek = merek 
#         self.tipe = tipe
#     def __str__(self):
#         return 'Gadget {} dengan tipe {}'.format(self.merek, self.tipe)
# class Handphone(Gadget):
#     def __init__(self, merek, tipe, os):
#         super().__init__(merek, tipe) 
#         self.os = os
#     def __str__(self):
#         return super (). __str__ () + \
#         ': Handphone {} dengan os {}'.format(self.merek, self.os)
# class Tablet(Gadget):
#     def __init__(self, merek, tipe, ukuran):
#         super().__init__(merek, tipe) 
#         self.ukuran = ukuran
#     def __str__(self):
#         return 'Tablet berukuran {} inch'.format(self.ukuran)
    
# tb = Tablet("Super", "3", "12") 
# print(tb)
# hp = Handphone("Space", "2", "Door") 
# print(hp)



# def total(a_list):
#     if a_list == []:
#         return 0
#     elif type(a_list[0]) == list:
#         return total(a_list[0]) + total(a_list[1:])
#     else:
#         return int(a_list[0]) + total(a_list[1:])

# def jumlah(a_list):
#     if a_list==[]:
#         return 0
#     elif type(a_list[0]) == list:
#         return jumlah(a_list[0]) + jumlah(a_list[1:])
#     else:
#         return 1 + jumlah(a_list[1:])

# def rata_rata(alist):
#     n = jumlah(alist)
#     t_otal = total(alist)
#     return t_otal / n

# # Corrected list and print statement
# print(rata_rata([1, [2, 3, [4]]]))
# print(rata_rata ([[[1]] ,[[2] ,[3] ,[4]]]))
# print(rata_rata([1,2,3,4]))



# fib_call_count = [] 
# def fib(n):
#     fib_call_count.append(1) 
#     if n == 0 or n == 1:
#         return n 
#     else:
#         return fib(n-1) + fib(n-2)
# ffib_call_count = [] 
# def ffib(n, memo={}):
#     ffib_call_count.append(1) 
#     if n == 0 or n == 1:
#         return n 
#     try:
#         return memo[n]
#     except KeyError: # exception terjadi jika key n tidak ditemukan di memo
#         result = ffib(n-1, memo) + ffib(n-2, memo) 
#         memo[n] = result
#         print(memo) # cetak isi memo
#         return result
# k=6
# print("fib({}): {}".format(k,fib(k)))
# print("called fib", len(fib_call_count), "times")

# print("ffib({}): {}".format(k,ffib(k))) 
# print("called ffib", len(ffib_call_count), "times")

